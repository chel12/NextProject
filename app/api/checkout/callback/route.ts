//–∑–∞–ø—Ä–æ—Å –¥–ª—è —é–∫–∞—Å—Å—ã, —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
import { PaymentCallbackData } from '@/@types/yookassa';
import { prisma } from '@/prisma/prisma-client';
import { CartItemDTO } from '@/services/dto/cart.dto';
import { OrderSuccessTemplate } from '@/shared/components/shared/email-templates/order-success';
import { sendEmail } from '@/shared/lib';
import { OrderStatus } from '@prisma/client';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
	try {
		//–ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å
		const body = (await req.json()) as PaymentCallbackData;
		//–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–π –∏ —á—Ç–æ –¥–∞–ª—å—à–µ
		const order = await prisma.order.findFirst({
			where: {
				id: Number(body.object.metadata.order_id),
			},
		});

		//–µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–∞ –≤—ã–¥–∞–π –æ—à–∏–±–∫—É
		if (!order) {
			return NextResponse.json(
				{ error: 'Order not found' },
				{ status: 404 }
			);
		}

		//–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –≤ –ë–î

		const isSucceeded = body.object.status === 'succeeded';
		await prisma.order.update({
			where: {
				id: order.id,
			},
			data: {
				status: isSucceeded
					? OrderStatus.SUCCEEDED
					: OrderStatus.CANCELLED,
			},
		});

		//–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º items
		const items = JSON.parse(
			order?.items as unknown as string
		) as CartItemDTO[];
		if (isSucceeded) {
			await sendEmail(
				order.email,
				'Next Game / –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω ü•∞',
				OrderSuccessTemplate({ orderId: order.id, items })
			);
		} else {
			//–ø–∏—Å—å–º–æ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
		}
	} catch (error) {
		console.log('[Checkout Callback] Error:', error);
		return NextResponse.json({ error: 'Server error' }, { status: 500 });
	}
}
